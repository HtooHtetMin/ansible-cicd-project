---
- name: Deploy Next.js Docker container
  hosts: all
  become: yes

  vars:
    IMAGE_NAME: "{{ image_name }}"
    DOCKERHUB_USERNAME: "{{ dockerhub_username }}"
    DOCKERHUB_TOKEN: "{{ dockerhub_token }}"
    DOMAIN_NAME: "{{ domain }}"
    NGINX_CONFIG_FILE: "/etc/nginx/sites-available/{{ DOMAIN_NAME }}.conf"
    NGINX_ENABLED_FILE: "/etc/nginx/sites-enabled/{{ DOMAIN_NAME }}.conf"
    ENABLE_SSL: "{{ enable_ssl | default(false) | bool }}"
    APP_PORT: 3001
    email: "htoohtet102833@gmail.com"

  tasks:
    - name: Configure Swap if not configured
      include_role:
        name: geerlingguy.swap
      vars:
        swap_file_size_mb: 1024
        swap_swappiness: 10
      when: ansible_swaptotal_mb < 1024

    - name: Update APT cache if needed
      apt:
        update_cache: yes
      changed_when: false

    - name: Install necessary packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker.io
        - nginx
      when: ansible_facts.packages['docker.io'] is not defined or ansible_facts.packages['nginx'] is not defined

    - name: Ensure Docker and Nginx are running
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - docker
        - nginx

    - name: Install Certbot and Nginx plugin
      apt:
        name: "{{ item }}"
        state: present
      when: ENABLE_SSL
      loop:
        - certbot
        - python3-certbot-nginx

    - name: Login to DockerHub
      docker_login:
        username: "{{ DOCKERHUB_USERNAME }}"
        password: "{{ DOCKERHUB_TOKEN }}"

    - name: Pull Docker image
      docker_image:
        name: "{{ IMAGE_NAME }}"
        source: pull

    - name: Run Docker container
      docker_container:
        name: "{{ DOMAIN_NAME }}"
        image: "{{ IMAGE_NAME }}"
        state: started
        restart_policy: always
        ports:
          - "{{ APP_PORT }}:3000"
        env:
          NODE_ENV: production
          PORT: 3000

    - name: Check if Nginx configuration exists
      stat:
        path: "{{ NGINX_CONFIG_FILE }}"
      register: nginx_config

    - name: Copy Nginx Configuration
      template:
        src: nginx.conf.j2
        dest: "{{ NGINX_CONFIG_FILE }}"
      when: not nginx_config.stat.exists

    - name: Enable Nginx configuration
      file:
        src: "{{ NGINX_CONFIG_FILE }}"
        dest: "{{ NGINX_ENABLED_FILE }}"
        state: link
      when: not nginx_config.stat.exists
      notify: Restart Nginx

    - name: Install SSL certificate
      command: "certbot --nginx -d {{ DOMAIN_NAME }} -n --agree-tos --email {{ email }}"
      when: ENABLE_SSL

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: reloaded
