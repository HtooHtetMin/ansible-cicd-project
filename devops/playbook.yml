---
- name: Deploy Next.js Docker container
  hosts: all
  become: yes  # Run as root

  vars:
    domain: "18.138.128.241"
    IMAGE_NAME: "{{ image_name }}"  # Ensure no ":latest" is added by default
    CONTAINER_NAME: "{{ container_name }}"
    DOCKERHUB_USERNAME: "{{ dockerhub_username }}"
    DOCKERHUB_TOKEN: "{{ dockerhub_token }}"
    DOMAIN_NAME: "{{ domain }}"
    NGINX_CONFIG_FILE: "/etc/nginx/sites-available/{{ DOMAIN_NAME }}.conf"
    NGINX_ENABLED_FILE: "/etc/nginx/sites-enabled/{{ DOMAIN_NAME }}.conf"
    ENABLE_SSL: "{{ enable_ssl | default(false) | bool }}"
    APP_PORT: 3001
    email: "htoohtet102833@gmail.com"  # Ensure you have an email variable defined for Certbot

  tasks:
    - name: Check for active swap devices
      command: swapon --show
      register: swap_devices
      changed_when: false

    - name: Debug active swap devices
      debug:
        msg: "{{ swap_devices.stdout_lines }}"

    - name: Disable swap (if exists)
      command: swapoff {{ item }}
      loop: "{{ swap_devices.stdout_lines | map('regex_replace', '^\\s*(\\S+).*$', '\\1') | list }}"
      when: swap_devices.stdout_lines | length > 0
      ignore_errors: yes

    - name: Remove containerd if present
      apt:
        name: containerd
        state: absent
      ignore_errors: yes

    - name: Remove old Docker repository configuration
      shell: |
        rm -rf /etc/apt/sources.list.d/docker.list
        rm -rf /etc/apt/keyrings/docker.gpg
      changed_when: false
      ignore_errors: yes

    - name: Update APT repository cache
      apt:
        update_cache: yes

    - name: Install required packages for Docker
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        executable: /bin/bash
      changed_when: false

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Update APT cache after adding Docker repository
      apt:
        update_cache: yes

    - name: Install Docker components
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Enable and start Nginx 
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Install Certbot and Nginx plugin
      apt:
        name: "{{ item }}"
        state: present
      when: ENABLE_SSL
      loop:
        - certbot
        - python3-certbot-nginx

    - name: Login to DockerHub with token
      docker_login:
        username: "{{ DOCKERHUB_USERNAME }}"
        password: "{{ DOCKERHUB_TOKEN }}"

    - name: Validate Docker image name format
      assert:
        that:
          - IMAGE_NAME is defined
          - IMAGE_NAME | regex_search('^[a-z0-9]+([._-][a-z0-9]+)*/[a-z0-9]+([._-][a-z0-9]+)*:[a-zA-Z0-9_.-]+$')
        msg: "Invalid Docker image name: '{{ IMAGE_NAME }}'. Format should be '<username>/<repository>:<tag>'."

    - name: Debug Docker image name
      debug:
        msg: "Pulling Docker image: {{ IMAGE_NAME }}"

    - name: Pull Docker image
      docker_image:
        name: "{{ IMAGE_NAME }}"
        source: pull

    - name: Run Docker container
      docker_container:
        name: "{{ DOMAIN_NAME }}"
        image: "{{ IMAGE_NAME }}"
        state: started
        restart_policy: always
        ports:
          - "{{ APP_PORT }}:3000"
        env: 
          NODE_ENV: "production"  # Ensure this is a string
          PORT: "3000"            # Ensure this is a string

    - name: Wait for Docker container to start
      wait_for:
        host: localhost
        port: "{{ APP_PORT }}"
        delay: 5
        timeout: 60

    - name: Check if Nginx configuration exists 
      stat:
        path: "{{ NGINX_CONFIG_FILE }}"
      register: nginx_config 

    - name: Copy Nginx Configuration 
      template:
        src: nginx.conf.j2
        dest: "{{ NGINX_CONFIG_FILE }}"
      when: not nginx_config.stat.exists

    - name: Enable Nginx configuration
      file:
        src: "{{ NGINX_CONFIG_FILE }}"
        dest: "{{ NGINX_ENABLED_FILE }}"
        state: link
      when: not nginx_config.stat.exists
      notify: Restart Nginx

    - name: Install SSL certificate
      command: "certbot --nginx -d {{ DOMAIN_NAME }} -n --agree-tos --email {{ email }}"
      when: ENABLE_SSL

  handlers: 
    - name: Restart Nginx
      service:
        name: nginx
        state: reloaded
